/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MarpSlides
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/views/marpPreviewView.ts
var import_obsidian = require("obsidian");
var MARP_PREVIEW_VIEW = "marp-preview-view";
var MarpPreviewView = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return MARP_PREVIEW_VIEW;
  }
  getDisplayText() {
    return "Example view";
  }
  async onOpen() {
    console.log("Marp Preview onOpen View");
  }
  async onClose() {
    console.log("Marp Preview onClose View");
  }
  async onChange() {
    console.log("Marp Preview onChange View");
  }
  displaySlides() {
    console.log("Marp Preview Display Slides");
    const container = this.containerEl.children[1];
    container.empty();
    container.innerHTML = "<div>Hello Word!</div>";
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MarpSlides = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      MARP_PREVIEW_VIEW,
      (leaf) => new MarpPreviewView(leaf)
    );
    const ribbonIconEl = this.addRibbonIcon("slides", "Show Slide Preview", async () => {
      await this.showView();
    });
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new MarpSlidesModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new MarpSlidesModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new MarpSlidesSettingTab(this.app, this));
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(MARP_PREVIEW_VIEW);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(MARP_PREVIEW_VIEW);
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: MARP_PREVIEW_VIEW,
      active: true
    });
    this.app.workspace.revealLeaf(
      this.app.workspace.getLeavesOfType(MARP_PREVIEW_VIEW)[0]
    );
  }
  async showView() {
    const targetDocument = this.app.workspace.getActiveFile();
    const targetView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (!targetDocument) {
      return;
    }
    console.log(targetDocument);
    console.log(targetView == null ? void 0 : targetView.data);
    if (targetDocument == this.target && this.app.workspace.getLeavesOfType(MARP_PREVIEW_VIEW).length > 0) {
      return;
    }
    this.target = targetDocument;
    await this.activateView();
    const instance = this.getViewInstance();
    instance.displaySlides();
  }
  getViewInstance() {
    for (const leaf of this.app.workspace.getLeavesOfType(MARP_PREVIEW_VIEW)) {
      const view = leaf.view;
      console.log(view);
      if (view instanceof MarpPreviewView) {
        return view;
      }
    }
    return new MarpPreviewView(this.app.workspace.getLeavesOfType(MARP_PREVIEW_VIEW)[0]);
  }
};
var MarpSlidesModal = class extends import_obsidian2.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var MarpSlidesSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for my awesome plugin." });
    new import_obsidian2.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      console.log("Secret: " + value);
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3ZpZXdzL21hcnBQcmV2aWV3Vmlldy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBUQWJzdHJhY3RGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5pbXBvcnQgeyBNQVJQX1BSRVZJRVdfVklFVywgTWFycFByZXZpZXdWaWV3IH0gZnJvbSAnLi92aWV3cy9tYXJwUHJldmlld1ZpZXcnO1xuXG4vLyBSZW1lbWJlciB0byByZW5hbWUgdGhlc2UgY2xhc3NlcyBhbmQgaW50ZXJmYWNlcyFcblxuaW50ZXJmYWNlIE1hcnBTbGlkZXNTZXR0aW5ncyB7XG5cdG15U2V0dGluZzogc3RyaW5nO1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBNYXJwU2xpZGVzU2V0dGluZ3MgPSB7XG5cdG15U2V0dGluZzogJ2RlZmF1bHQnXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcnBTbGlkZXMgZXh0ZW5kcyBQbHVnaW4ge1xuXHRzZXR0aW5nczogTWFycFNsaWRlc1NldHRpbmdzO1xuXG5cdHByaXZhdGUgdGFyZ2V0OiBUQWJzdHJhY3RGaWxlO1xuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG5cdFx0dGhpcy5yZWdpc3RlclZpZXcoXG5cdFx0XHRNQVJQX1BSRVZJRVdfVklFVyxcblx0XHRcdChsZWFmKSA9PiBuZXcgTWFycFByZXZpZXdWaWV3KGxlYWYpXG5cdFx0KTtcblxuXHRcdGNvbnN0IHJpYmJvbkljb25FbCA9IHRoaXMuYWRkUmliYm9uSWNvbignc2xpZGVzJywgJ1Nob3cgU2xpZGUgUHJldmlldycsIGFzeW5jICgpID0+IHtcblx0XHRcdGF3YWl0IHRoaXMuc2hvd1ZpZXcoKTtcblx0XHR9KTtcblx0XHRcblx0XHQvLyAvLyBUaGlzIGNyZWF0ZXMgYW4gaWNvbiBpbiB0aGUgbGVmdCByaWJib24uXG5cdFx0Ly8gY29uc3QgcmliYm9uSWNvbkVsID0gdGhpcy5hZGRSaWJib25JY29uKCdkaWNlJywgJ1NhbXBsZSBQbHVnaW4nLCAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG5cdFx0Ly8gXHQvLyBDYWxsZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlIGljb24uXG5cdFx0Ly8gXHRuZXcgTm90aWNlKCdUaGlzIGlzIGEgbm90aWNlIScpO1xuXHRcdC8vIH0pO1xuXG5cdFx0Ly8gLy8gUGVyZm9ybSBhZGRpdGlvbmFsIHRoaW5ncyB3aXRoIHRoZSByaWJib25cblx0XHQvL3JpYmJvbkljb25FbC5hZGRDbGFzcygnbXktcGx1Z2luLXJpYmJvbi1jbGFzcycpO1xuXG5cblxuXG5cdFx0Ly8gVGhpcyBhZGRzIGEgc2ltcGxlIGNvbW1hbmQgdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIGFueXdoZXJlXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnb3Blbi1zYW1wbGUtbW9kYWwtc2ltcGxlJyxcblx0XHRcdG5hbWU6ICdPcGVuIHNhbXBsZSBtb2RhbCAoc2ltcGxlKScsXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xuXHRcdFx0XHRuZXcgTWFycFNsaWRlc01vZGFsKHRoaXMuYXBwKS5vcGVuKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Ly8gVGhpcyBhZGRzIGFuIGVkaXRvciBjb21tYW5kIHRoYXQgY2FuIHBlcmZvcm0gc29tZSBvcGVyYXRpb24gb24gdGhlIGN1cnJlbnQgZWRpdG9yIGluc3RhbmNlXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnc2FtcGxlLWVkaXRvci1jb21tYW5kJyxcblx0XHRcdG5hbWU6ICdTYW1wbGUgZWRpdG9yIGNvbW1hbmQnLFxuXHRcdFx0ZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3KSA9PiB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGVkaXRvci5nZXRTZWxlY3Rpb24oKSk7XG5cdFx0XHRcdGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKCdTYW1wbGUgRWRpdG9yIENvbW1hbmQnKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHQvLyBUaGlzIGFkZHMgYSBjb21wbGV4IGNvbW1hbmQgdGhhdCBjYW4gY2hlY2sgd2hldGhlciB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgYXBwIGFsbG93cyBleGVjdXRpb24gb2YgdGhlIGNvbW1hbmRcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdvcGVuLXNhbXBsZS1tb2RhbC1jb21wbGV4Jyxcblx0XHRcdG5hbWU6ICdPcGVuIHNhbXBsZSBtb2RhbCAoY29tcGxleCknLFxuXHRcdFx0Y2hlY2tDYWxsYmFjazogKGNoZWNraW5nOiBib29sZWFuKSA9PiB7XG5cdFx0XHRcdC8vIENvbmRpdGlvbnMgdG8gY2hlY2tcblx0XHRcdFx0Y29uc3QgbWFya2Rvd25WaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0XHRcdFx0aWYgKG1hcmtkb3duVmlldykge1xuXHRcdFx0XHRcdC8vIElmIGNoZWNraW5nIGlzIHRydWUsIHdlJ3JlIHNpbXBseSBcImNoZWNraW5nXCIgaWYgdGhlIGNvbW1hbmQgY2FuIGJlIHJ1bi5cblx0XHRcdFx0XHQvLyBJZiBjaGVja2luZyBpcyBmYWxzZSwgdGhlbiB3ZSB3YW50IHRvIGFjdHVhbGx5IHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cblx0XHRcdFx0XHRpZiAoIWNoZWNraW5nKSB7XG5cdFx0XHRcdFx0XHRuZXcgTWFycFNsaWRlc01vZGFsKHRoaXMuYXBwKS5vcGVuKCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gVGhpcyBjb21tYW5kIHdpbGwgb25seSBzaG93IHVwIGluIENvbW1hbmQgUGFsZXR0ZSB3aGVuIHRoZSBjaGVjayBmdW5jdGlvbiByZXR1cm5zIHRydWVcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gVGhpcyBhZGRzIGEgc2V0dGluZ3MgdGFiIHNvIHRoZSB1c2VyIGNhbiBjb25maWd1cmUgdmFyaW91cyBhc3BlY3RzIG9mIHRoZSBwbHVnaW5cblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IE1hcnBTbGlkZXNTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG5cblx0XHQvLyBJZiB0aGUgcGx1Z2luIGhvb2tzIHVwIGFueSBnbG9iYWwgRE9NIGV2ZW50cyAob24gcGFydHMgb2YgdGhlIGFwcCB0aGF0IGRvZXNuJ3QgYmVsb25nIHRvIHRoaXMgcGx1Z2luKVxuXHRcdC8vIFVzaW5nIHRoaXMgZnVuY3Rpb24gd2lsbCBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgZXZlbnQgbGlzdGVuZXIgd2hlbiB0aGlzIHBsdWdpbiBpcyBkaXNhYmxlZC5cblx0XHQvLyB0aGlzLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycsIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcblx0XHQvLyBcdGNvbnNvbGUubG9nKCdjbGljaycsIGV2dCk7XG5cdFx0Ly8gfSk7XG5cblx0XHQvLyBXaGVuIHJlZ2lzdGVyaW5nIGludGVydmFscywgdGhpcyBmdW5jdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgY2xlYXIgdGhlIGludGVydmFsIHdoZW4gdGhlIHBsdWdpbiBpcyBkaXNhYmxlZC5cblx0XHQvL3RoaXMucmVnaXN0ZXJJbnRlcnZhbCh3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4gY29uc29sZS5sb2coJ3NldEludGVydmFsJyksIDUgKiA2MCAqIDEwMDApKTtcblx0fVxuXG5cdG9udW5sb2FkKCkge1xuXHRcdHRoaXMuYXBwLndvcmtzcGFjZS5kZXRhY2hMZWF2ZXNPZlR5cGUoTUFSUF9QUkVWSUVXX1ZJRVcpO1xuXHR9XG5cblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuXHR9XG5cblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG5cdH1cblxuXHRhc3luYyBhY3RpdmF0ZVZpZXcoKSB7XG5cdFx0dGhpcy5hcHAud29ya3NwYWNlLmRldGFjaExlYXZlc09mVHlwZShNQVJQX1BSRVZJRVdfVklFVyk7XG5cdFxuXHRcdGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRSaWdodExlYWYoZmFsc2UpLnNldFZpZXdTdGF0ZSh7XG5cdFx0ICB0eXBlOiBNQVJQX1BSRVZJRVdfVklFVyxcblx0XHQgIGFjdGl2ZTogdHJ1ZSxcblx0XHR9KTtcblx0XG5cdFx0dGhpcy5hcHAud29ya3NwYWNlLnJldmVhbExlYWYoXG5cdFx0ICB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKE1BUlBfUFJFVklFV19WSUVXKVswXVxuXHRcdCk7XG5cdCAgfVxuXG5cdGFzeW5jIHNob3dWaWV3KCkge1xuXHRcdGNvbnN0IHRhcmdldERvY3VtZW50ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcblx0XHRjb25zdCB0YXJnZXRWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblxuXHRcdGlmICghdGFyZ2V0RG9jdW1lbnQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zb2xlLmxvZyh0YXJnZXREb2N1bWVudCk7XG5cdFx0Y29uc29sZS5sb2codGFyZ2V0Vmlldz8uZGF0YSk7XG5cblx0XHRpZiAodGFyZ2V0RG9jdW1lbnQgPT0gdGhpcy50YXJnZXQgJiYgdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShNQVJQX1BSRVZJRVdfVklFVykubGVuZ3RoID4gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMudGFyZ2V0ID0gdGFyZ2V0RG9jdW1lbnQ7XG5cdFx0YXdhaXQgdGhpcy5hY3RpdmF0ZVZpZXcoKTtcblxuXHRcdC8vIGNvbnN0IHVybCA9IHRoaXMucmV2ZWFsU2VydmVyLmdldFVybCgpO1xuXHRcdC8vIHVybC5wYXRobmFtZSA9IHRoaXMuZml4ZWRFbmNvZGVVUklDb21wb25lbnQodGhpcy50YXJnZXQucGF0aCk7XG5cblx0XHQvLyB0aGlzLm9wZW5VcmwodXJsKTtcblx0XHQvLyB0aGlzLnNob3dNb3RtKCk7XG5cblx0XHRjb25zdCBpbnN0YW5jZSA9IHRoaXMuZ2V0Vmlld0luc3RhbmNlKCk7XG5cdFx0aW5zdGFuY2UuZGlzcGxheVNsaWRlcygpO1xuXHR9XG5cblx0Z2V0Vmlld0luc3RhbmNlKCkgOiBNYXJwUHJldmlld1ZpZXcge1xuXHRcdGZvciAoY29uc3QgbGVhZiBvZiB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKE1BUlBfUFJFVklFV19WSUVXKSkge1xuXHRcdFx0Y29uc3QgdmlldyA9IGxlYWYudmlldztcblx0XHRcdGNvbnNvbGUubG9nKHZpZXcpO1xuXHRcdFx0aWYgKHZpZXcgaW5zdGFuY2VvZiBNYXJwUHJldmlld1ZpZXcpIHtcblx0XHRcdFx0cmV0dXJuIHZpZXc7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBuZXcgTWFycFByZXZpZXdWaWV3KHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoTUFSUF9QUkVWSUVXX1ZJRVcpWzBdKTtcblx0fVxufVxuXG5jbGFzcyBNYXJwU2xpZGVzTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwKSB7XG5cdFx0c3VwZXIoYXBwKTtcblx0fVxuXG5cdG9uT3BlbigpIHtcblx0XHRjb25zdCB7Y29udGVudEVsfSA9IHRoaXM7XG5cdFx0Y29udGVudEVsLnNldFRleHQoJ1dvYWghJyk7XG5cdH1cblxuXHRvbkNsb3NlKCkge1xuXHRcdGNvbnN0IHtjb250ZW50RWx9ID0gdGhpcztcblx0XHRjb250ZW50RWwuZW1wdHkoKTtcblx0fVxufVxuXG5jbGFzcyBNYXJwU2xpZGVzU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuXHRwbHVnaW46IE1hcnBTbGlkZXM7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogTWFycFNsaWRlcykge1xuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0fVxuXG5cdGRpc3BsYXkoKTogdm9pZCB7XG5cdFx0Y29uc3Qge2NvbnRhaW5lckVsfSA9IHRoaXM7XG5cblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xuXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywge3RleHQ6ICdTZXR0aW5ncyBmb3IgbXkgYXdlc29tZSBwbHVnaW4uJ30pO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnU2V0dGluZyAjMScpXG5cdFx0XHQuc2V0RGVzYygnSXRcXCdzIGEgc2VjcmV0Jylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHlvdXIgc2VjcmV0Jylcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm15U2V0dGluZylcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdTZWNyZXQ6ICcgKyB2YWx1ZSk7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nID0gdmFsdWU7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdH0pKTtcblx0fVxufVxuIiwgImltcG9ydCB7IEl0ZW1WaWV3LCBNYXJrZG93blZpZXcsIE1lbnUsIFdvcmtzcGFjZUxlYWYgfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBjb25zdCBNQVJQX1BSRVZJRVdfVklFVyA9ICdtYXJwLXByZXZpZXctdmlldyc7XG5cbmV4cG9ydCBjbGFzcyBNYXJwUHJldmlld1ZpZXcgZXh0ZW5kcyBJdGVtVmlldyAge1xuICAgIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYpIHtcbiAgICAgICAgc3VwZXIobGVhZik7XG4gICAgfVxuXG4gICAgZ2V0Vmlld1R5cGUoKSB7XG4gICAgICAgIHJldHVybiBNQVJQX1BSRVZJRVdfVklFVztcbiAgICB9XG5cbiAgICBnZXREaXNwbGF5VGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIFwiRXhhbXBsZSB2aWV3XCI7XG4gICAgfVxuXG4gICAgYXN5bmMgb25PcGVuKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIk1hcnAgUHJldmlldyBvbk9wZW4gVmlld1wiKTtcblxuICAgICAgICAvLyBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lckVsLmNoaWxkcmVuWzFdO1xuICAgICAgICAvLyBjb250YWluZXIuZW1wdHkoKTtcbiAgICAgICAgLy8gY29udGFpbmVyLmNyZWF0ZUVsKFwiaDRcIiwgeyB0ZXh0OiBcIkV4YW1wbGUgdmlld1wiIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIG9uQ2xvc2UoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTWFycCBQcmV2aWV3IG9uQ2xvc2UgVmlld1wiKTtcbiAgICAgICAgLy8gTm90aGluZyB0byBjbGVhbiB1cC5cbiAgICB9XG5cbiAgICBhc3luYyBvbkNoYW5nZSgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJNYXJwIFByZXZpZXcgb25DaGFuZ2UgVmlld1wiKTtcbiAgICAgICAgLy8gTm90aGluZyB0byBjbGVhbiB1cC5cbiAgICB9XG4gICAgXG4gICAgZGlzcGxheVNsaWRlcygpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJNYXJwIFByZXZpZXcgRGlzcGxheSBTbGlkZXNcIik7XG5cbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXJFbC5jaGlsZHJlblsxXTtcbiAgICAgICAgY29udGFpbmVyLmVtcHR5KCk7XG4gICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSBcIjxkaXY+SGVsbG8gV29yZCE8L2Rpdj5cIjtcbiAgICAgICAgLy90aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoeyB0ZXh0OiBcImhlbGxvIHdvcmQhXCIgfSlcblxuXHRcdC8vIGNvbnN0IHZpZXdDb250ZW50ID0gdGhpcy5jb250YWluZXJFbC5jaGlsZHJlblsxXTtcblxuXHRcdC8vIHZpZXdDb250ZW50LmVtcHR5KCk7XG5cdFx0Ly8gdmlld0NvbnRlbnQuYWRkQ2xhc3MoJ3JldmVhbC1wcmV2aWV3LXZpZXcnKTtcblx0XHQvLyB2aWV3Q29udGVudC5jcmVhdGVFbCgnaWZyYW1lJywge1xuXHRcdC8vIFx0YXR0cjoge1xuXHRcdC8vIFx0XHQvLyBAdHMtaWdub3JlOlxuXHRcdC8vIFx0XHRzcmM6IHRoaXMudXJsLFxuXHRcdC8vIFx0XHRzYW5kYm94OiAnYWxsb3ctc2NyaXB0cyBhbGxvdy1zYW1lLW9yaWdpbiBhbGxvdy1wb3B1cHMnLFxuXHRcdC8vIFx0fSxcblx0XHQvLyB9KTtcblx0fVxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQSxtQkFBMkc7OztBQ0EzRyxzQkFBNEQ7QUFFckQsSUFBTSxvQkFBb0I7QUFFMUIsSUFBTSxrQkFBTixjQUE4Qix5QkFBVTtBQUFBLEVBQzNDLFlBQVksTUFBcUI7QUFDN0IsVUFBTSxJQUFJO0FBQUEsRUFDZDtBQUFBLEVBRUEsY0FBYztBQUNWLFdBQU87QUFBQSxFQUNYO0FBQUEsRUFFQSxpQkFBaUI7QUFDYixXQUFPO0FBQUEsRUFDWDtBQUFBLEVBRUEsTUFBTSxTQUFTO0FBQ1gsWUFBUSxJQUFJLDBCQUEwQjtBQUFBLEVBSzFDO0FBQUEsRUFFQSxNQUFNLFVBQVU7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
