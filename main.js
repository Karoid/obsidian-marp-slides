/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MarpSlides
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/views/marpPreviewView.ts
var import_obsidian = require("obsidian");
var MARP_PREVIEW_VIEW = "marp-preview-view";
var MarpPreviewView = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return MARP_PREVIEW_VIEW;
  }
  getDisplayText() {
    return "Example view";
  }
  async onOpen() {
    console.log("Marp Preview onOpen View");
    const container = this.containerEl.children[1];
    container.empty();
    container.createEl("h4", { text: "Example view" });
  }
  async onClose() {
  }
  displayView() {
    console.log("Display View");
    this.contentEl.empty();
    this.containerEl.innerHTML = "<div>Hello Word!</div>";
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MarpSlides = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      MARP_PREVIEW_VIEW,
      (leaf) => new MarpPreviewView(leaf)
    );
    const ribbonIconEl = this.addRibbonIcon("slides", "Show Slide Preview", async () => {
      await this.activateView();
    });
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new MarpSlidesModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new MarpSlidesModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new MarpSlidesSettingTab(this.app, this));
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(MARP_PREVIEW_VIEW);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(MARP_PREVIEW_VIEW);
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: MARP_PREVIEW_VIEW,
      active: true
    });
    this.app.workspace.revealLeaf(
      this.app.workspace.getLeavesOfType(MARP_PREVIEW_VIEW)[0]
    );
  }
  async showView() {
    const targetDocument = this.app.workspace.getActiveFile();
    if (!targetDocument) {
      return;
    }
    console.log(targetDocument);
    await this.activateView();
    const instance = this.getViewInstance();
    instance.displayView();
  }
  async openUrl(url) {
  }
  getViewInstance() {
    for (const leaf of this.app.workspace.getLeavesOfType(MARP_PREVIEW_VIEW)) {
      const view = leaf.view;
      console.log(view);
      if (view instanceof MarpPreviewView) {
        return view;
      }
    }
    return new MarpPreviewView(this.app.workspace.getLeavesOfType(MARP_PREVIEW_VIEW)[0]);
  }
};
var MarpSlidesModal = class extends import_obsidian2.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var MarpSlidesSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for my awesome plugin." });
    new import_obsidian2.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      console.log("Secret: " + value);
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
